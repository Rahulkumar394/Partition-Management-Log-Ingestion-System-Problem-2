# FILE: log-ingestion-system/docker-compose.yml (FINAL VERSION)

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: kafka
      # KAFKA_OPTS has been removed to prevent startup failures.
    ports:
      - 29092:29092
      - 9092:9092
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 20

  # A dedicated JMX Exporter container. This is the most reliable method.
  jmx-exporter:
    image: sscaling/jmx-prometheus-exporter:latest
    container_name: jmx-exporter
    depends_on:
      - kafka
    ports:
      - "5556:5556"
    environment:
      SERVICE_PORT: 5556
      JMX_HOST: kafka
      JMX_PORT: 9999
    volumes:
      - ./jmx-kafka-config.yml:/etc/jmx_exporter/config.yml
    restart: unless-stopped

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: /bin/sh
    environment:
      PARTITION_COUNT: ${KAFKA_TOPIC_PARTITIONS:-50}
    command: >
      -c "
      echo 'Waiting for Kafka...';
      cub kafka-ready -b kafka:9092 1 60;
      echo 'Creating topic with $$PARTITION_COUNT partitions and 1-day retention...';
      kafka-topics --create --topic logs.events --partitions $$PARTITION_COUNT --replication-factor 1 --config retention.ms=86400000 --if-not-exists --bootstrap-server kafka:9092;
      echo 'Verifying topic creation...';
      kafka-topics --describe --topic logs.events --bootstrap-server kafka:9092;
      echo 'Topic setup completed successfully';
      "

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    restart: unless-stopped
    ports:
      - "9308:9308"
    command: --kafka.server=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - jmx-exporter
      - kafka-exporter

  grafana:
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana

  log-producer:
    build: .
    environment:
      SPRING_PROFILES_ACTIVE: producer
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC_PARTITIONS: ${KAFKA_TOPIC_PARTITIONS:-50}
      JAVA_OPTS: "-Xmx512m -Xms256m"
    ports:
      - "8081:8080"
    depends_on:
      - kafka-init
    restart: unless-stopped

  log-consumer-1:
    build: .
    environment:
      SPRING_PROFILES_ACTIVE: consumer
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_APPLICATION_NAME: log-consumer-1
      KAFKA_TOPIC_PARTITIONS: ${KAFKA_TOPIC_PARTITIONS:-50}
      JAVA_OPTS: "-Xmx512m -Xms256m -Dconsumer.instance.id=consumer-1"
    ports:
      - "8082:8080"
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  log-consumer-2:
    build: .
    environment:
      SPRING_PROFILES_ACTIVE: consumer
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_APPLICATION_NAME: log-consumer-2
      KAFKA_TOPIC_PARTITIONS: ${KAFKA_TOPIC_PARTITIONS:-50}
      JAVA_OPTS: "-Xmx512m -Xms256m -Dconsumer.instance.id=consumer-2"
    ports:
      - "8083:8080"
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  log-consumer-3:
    build: .
    environment:
      SPRING_PROFILES_ACTIVE: consumer
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_APPLICATION_NAME: log-consumer-3
      KAFKA_TOPIC_PARTITIONS: ${KAFKA_TOPIC_PARTITIONS:-50}
      JAVA_OPTS: "-Xmx512m -Xms256m -Dconsumer.instance.id=consumer-3"
    ports:
      - "8084:8080"
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

volumes:
  grafana_data: